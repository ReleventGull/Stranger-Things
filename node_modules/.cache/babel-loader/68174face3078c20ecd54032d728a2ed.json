{"ast":null,"code":"const BASEURL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\";\nexport const FetchPost = async () => {\n  try {\n    const response = await fetch(`${BASEURL}/posts`);\n    const {\n      data\n    } = await response.json();\n    return data.posts;\n  } catch (error) {\n    console.error(error);\n  }\n};\n_c = FetchPost;\nexport const isUserLoggedIn = async token => {\n  if (token) {\n    console.log(\"token is true\", token);\n    return true;\n  } else {\n    return false;\n  }\n};\nexport const checkUsers = async (username, password) => {\n  try {\n    const response = await fetch('https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/users/login', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    return await response.json();\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch('https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/users/register', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    return response.json();\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const createPost = async (title, description, price, willDeliver, token) => {\n  try {\n    const response = await fetch('https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/users/posts', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer TOKEN_STRING_HERE'`\n      },\n      body: JSON.stringify({\n        post: {\n          title: title,\n          description: description,\n          price: price,\n          willDeliver: willDeliver\n        }\n      })\n    });\n    return response.json();\n  } catch (error) {\n    console.error(error);\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"FetchPost\");","map":{"version":3,"names":["BASEURL","FetchPost","response","fetch","data","json","posts","error","console","isUserLoggedIn","token","log","checkUsers","username","password","method","headers","body","JSON","stringify","user","registerUser","createPost","title","description","price","willDeliver","post"],"sources":["/home/jaron/ClassProject/Stranger-Things/src/api/Api.js"],"sourcesContent":["\n\nconst BASEURL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\"\nexport const FetchPost = async () => {\n    \n    try {\n        const response = await fetch(`${BASEURL}/posts`)\n        const {data} = await response.json()\n        return data.posts\n\n    }catch(error) {\n        console.error(error)\n    }\n\n\n}\n\n\n\nexport const isUserLoggedIn = async (token) => {\n    if (token) {\n      console.log(\"token is true\",token)\n      return true\n    } else {\n      return false\n    }\n };\n\n\n\nexport const  checkUsers = async (username, password) => {\ntry {\n    const response = await fetch('https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/users/login', {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: {\n            username: username,\n            password: password\n          }\n        })\n      })\n      return await response.json()\n} catch(error) {\n    console.error(error)\n}\n}\n\n\n\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch('https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/users/register', {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: {\n            username: username,\n            password: password\n          }\n        })\n      })\n      return  response.json()\n} catch(error) {\n    console.error(error)\n}\n}\n\n\n\n\n\n\nexport const createPost = async(title, description, price, willDeliver, token) => {\n  try {\n    const response = await fetch('https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/users/posts', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer TOKEN_STRING_HERE'`\n      },\n      body: JSON.stringify({\n        post: {\n          title: title,\n          description: description,\n          price: price,\n          willDeliver: willDeliver\n          }\n        })\n      })\n      return  response.json()\n} catch(error) {\n    console.error(error)\n}\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"AAEA,MAAMA,OAAO,GAAG,+DAA+D;AAC/E,OAAO,MAAMC,SAAS,GAAG,YAAY;EAEjC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,QAAO,CAAC;IAChD,MAAM;MAACI;IAAI,CAAC,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IACpC,OAAOD,IAAI,CAACE,KAAK;EAErB,CAAC,QAAMC,KAAK,EAAE;IACVC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACxB;AAGJ,CAAC;AAAA,KAZYN,SAAS;AAgBtB,OAAO,MAAMQ,cAAc,GAAG,MAAOC,KAAK,IAAK;EAC3C,IAAIA,KAAK,EAAE;IACTF,OAAO,CAACG,GAAG,CAAC,eAAe,EAACD,KAAK,CAAC;IAClC,OAAO,IAAI;EACb,CAAC,MAAM;IACL,OAAO,KAAK;EACd;AACH,CAAC;AAIF,OAAO,MAAOE,UAAU,GAAG,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACzD,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,2EAA2E,EAAE;MACtGY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAE;UACJP,QAAQ,EAAEA,QAAQ;UAClBC,QAAQ,EAAEA;QACZ;MACF,CAAC;IACH,CAAC,CAAC;IACF,OAAO,MAAMZ,QAAQ,CAACG,IAAI,EAAE;EAClC,CAAC,CAAC,OAAME,KAAK,EAAE;IACXC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACxB;AACA,CAAC;AAID,OAAO,MAAMc,YAAY,GAAG,OAAOR,QAAQ,EAAEC,QAAQ,KAAK;EACxD,IAAI;IACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,8EAA8E,EAAE;MACzGY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAE;UACJP,QAAQ,EAAEA,QAAQ;UAClBC,QAAQ,EAAEA;QACZ;MACF,CAAC;IACH,CAAC,CAAC;IACF,OAAQZ,QAAQ,CAACG,IAAI,EAAE;EAC7B,CAAC,CAAC,OAAME,KAAK,EAAE;IACXC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACxB;AACA,CAAC;AAOD,OAAO,MAAMe,UAAU,GAAG,OAAMC,KAAK,EAAEC,WAAW,EAAEC,KAAK,EAAEC,WAAW,EAAEhB,KAAK,KAAK;EAChF,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,2EAA2E,EAAE;MACxGY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBQ,IAAI,EAAE;UACJJ,KAAK,EAAEA,KAAK;UACZC,WAAW,EAAEA,WAAW;UACxBC,KAAK,EAAEA,KAAK;UACZC,WAAW,EAAEA;QACb;MACF,CAAC;IACH,CAAC,CAAC;IACF,OAAQxB,QAAQ,CAACG,IAAI,EAAE;EAC7B,CAAC,CAAC,OAAME,KAAK,EAAE;IACXC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACxB;AAKA,CAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module"}