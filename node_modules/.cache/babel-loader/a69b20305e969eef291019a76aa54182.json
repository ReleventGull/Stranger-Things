{"ast":null,"code":"const BASEURL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\";\nconst makeHeaders = token => {\n  const headers = {\n    'Content-Type': 'application/json',\n    if(token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n  };\n  return headers;\n};\nconst callApi = async (endpointPath, _ref) => {\n  let {\n    method,\n    body,\n    token\n  } = _ref;\n  const {\n    options\n  } = {\n    method: method || 'GET',\n    headers: makeHeaders()\n  };\n  const response = await fetch(`${BASEURL}${endpointPath}`);\n  const result = await response.json();\n};\nexport const FetchPost = async () => {\n  try {\n    const response = await fetch(`${BASEURL}/posts`);\n    const {\n      data\n    } = await response.json();\n    return data.posts;\n  } catch (error) {\n    console.error(error);\n  }\n};\n_c = FetchPost;\nexport const isUserLoggedIn = async token => {\n  if (token) {\n    console.log(\"token is true\", token);\n    return true;\n  } else {\n    return false;\n  }\n};\nexport const checkUsers = async (username, password) => {\n  try {\n    const response = await fetch('https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/users/login', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    return await response.json();\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch('https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/users/register', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    return response.json();\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const createPost = async (title, description, price, willDeliver, token) => {\n  try {\n    const response = await fetch('https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/posts', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title: title,\n          description: description,\n          price: price,\n          willDeliver: willDeliver\n        }\n      })\n    });\n    return response.json();\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const fetchUserData = async token => {\n  try {\n    console.log(\"token passed in?\", token);\n    const response = await fetch('https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/users/me', {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    return response.json();\n  } catch (error) {\n    console.error(error);\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"FetchPost\");","map":{"version":3,"names":["BASEURL","makeHeaders","token","headers","if","callApi","endpointPath","method","body","options","response","fetch","result","json","FetchPost","data","posts","error","console","isUserLoggedIn","log","checkUsers","username","password","JSON","stringify","user","registerUser","createPost","title","description","price","willDeliver","post","fetchUserData"],"sources":["/home/jaron/ClassProject/Stranger-Things/src/api/Api.js"],"sourcesContent":["\n\nconst BASEURL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\"\n\n\nconst makeHeaders = (token) => {\n  \n  const headers = {\n  \n    'Content-Type': 'application/json',\n \n    if (token) {\n    headers['Authorization'] = `Bearer ${token}`\n    }\n}\nreturn headers\n}\n\nconst callApi = async(endpointPath, {method, body, token}) => {\n    const {options} = {\n      method: method || 'GET',\n      headers: makeHeaders()\n      \n    }\n    const response = await fetch(`${BASEURL}${endpointPath}`)\n    const result = await response.json()\n   \n}\n\nexport const FetchPost = async () => {\n    \n  try {\n      const response = await fetch(`${BASEURL}/posts`)\n      const {data} = await response.json()\n      return data.posts\n\n  }catch(error) {\n      console.error(error)\n  }\n\n\n}\n\n\nexport const isUserLoggedIn = async (token) => {\n    if (token) {\n      console.log(\"token is true\",token)\n      return true\n    } else {\n      return false\n    }\n };\n\n\n\nexport const  checkUsers = async (username, password) => {\ntry {\n    const response = await fetch('https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/users/login', {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: {\n            username: username,\n            password: password\n          }\n        })\n      })\n      return await response.json()\n} catch(error) {\n    console.error(error)\n}\n}\n\n\n\nexport const registerUser = async (username, password) => {\n  try {\n    const response = await fetch('https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/users/register', {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: {\n            username: username,\n            password: password\n          }\n        })\n      })\n      return  response.json()\n} catch(error) {\n    console.error(error)\n}\n}\n\n\n\n\n\n\nexport const createPost = async(title, description, price, willDeliver, token) => {\n  try {\n    const response = await fetch('https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/posts', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: {\n          title: title,\n          description: description,\n          price: price,\n          willDeliver: willDeliver\n          }\n        })\n      })\n      return  response.json()\n} catch(error) {\n    console.error(error)\n}\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport const fetchUserData = async(token) => {\n  try {\n    console.log(\"token passed in?\", token)\n    const response = await fetch('https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT/users/me', {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n     })\n      return  response.json()\n} catch(error) {\n    console.error(error)\n}\n}\n"],"mappings":"AAEA,MAAMA,OAAO,GAAG,+DAA+D;AAG/E,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAE7B,MAAMC,OAAO,GAAG;IAEd,cAAc,EAAE,kBAAkB;IAElCC,EAAE,CAAEF,KAAK,EAAE;MACXC,OAAO,CAAC,eAAe,CAAC,GAAI,UAASD,KAAM,EAAC;IAC5C;EACJ,CAAC;EACD,OAAOC,OAAO;AACd,CAAC;AAED,MAAME,OAAO,GAAG,OAAMC,YAAY,WAA4B;EAAA,IAA1B;IAACC,MAAM;IAAEC,IAAI;IAAEN;EAAK,CAAC;EACrD,MAAM;IAACO;EAAO,CAAC,GAAG;IAChBF,MAAM,EAAEA,MAAM,IAAI,KAAK;IACvBJ,OAAO,EAAEF,WAAW;EAEtB,CAAC;EACD,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEX,OAAQ,GAAEM,YAAa,EAAC,CAAC;EACzD,MAAMM,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;AAExC,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,YAAY;EAEnC,IAAI;IACA,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEX,OAAQ,QAAO,CAAC;IAChD,MAAM;MAACe;IAAI,CAAC,GAAG,MAAML,QAAQ,CAACG,IAAI,EAAE;IACpC,OAAOE,IAAI,CAACC,KAAK;EAErB,CAAC,QAAMC,KAAK,EAAE;IACVC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACxB;AAGF,CAAC;AAAA,KAZYH,SAAS;AAetB,OAAO,MAAMK,cAAc,GAAG,MAAOjB,KAAK,IAAK;EAC3C,IAAIA,KAAK,EAAE;IACTgB,OAAO,CAACE,GAAG,CAAC,eAAe,EAAClB,KAAK,CAAC;IAClC,OAAO,IAAI;EACb,CAAC,MAAM;IACL,OAAO,KAAK;EACd;AACH,CAAC;AAIF,OAAO,MAAOmB,UAAU,GAAG,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACzD,IAAI;IACA,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,2EAA2E,EAAE;MACtGJ,MAAM,EAAE,MAAM;MACdJ,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDK,IAAI,EAAEgB,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAE;UACJJ,QAAQ,EAAEA,QAAQ;UAClBC,QAAQ,EAAEA;QACZ;MACF,CAAC;IACH,CAAC,CAAC;IACF,OAAO,MAAMb,QAAQ,CAACG,IAAI,EAAE;EAClC,CAAC,CAAC,OAAMI,KAAK,EAAE;IACXC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACxB;AACA,CAAC;AAID,OAAO,MAAMU,YAAY,GAAG,OAAOL,QAAQ,EAAEC,QAAQ,KAAK;EACxD,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,8EAA8E,EAAE;MACzGJ,MAAM,EAAE,MAAM;MACdJ,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDK,IAAI,EAAEgB,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAE;UACJJ,QAAQ,EAAEA,QAAQ;UAClBC,QAAQ,EAAEA;QACZ;MACF,CAAC;IACH,CAAC,CAAC;IACF,OAAQb,QAAQ,CAACG,IAAI,EAAE;EAC7B,CAAC,CAAC,OAAMI,KAAK,EAAE;IACXC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACxB;AACA,CAAC;AAOD,OAAO,MAAMW,UAAU,GAAG,OAAMC,KAAK,EAAEC,WAAW,EAAEC,KAAK,EAAEC,WAAW,EAAE9B,KAAK,KAAK;EAChF,IAAI;IACF,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,qEAAqE,EAAE;MAClGJ,MAAM,EAAE,MAAM;MACdJ,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASD,KAAM;MACnC,CAAC;MACDM,IAAI,EAAEgB,IAAI,CAACC,SAAS,CAAC;QACnBQ,IAAI,EAAE;UACJJ,KAAK,EAAEA,KAAK;UACZC,WAAW,EAAEA,WAAW;UACxBC,KAAK,EAAEA,KAAK;UACZC,WAAW,EAAEA;QACb;MACF,CAAC;IACH,CAAC,CAAC;IACF,OAAQtB,QAAQ,CAACG,IAAI,EAAE;EAC7B,CAAC,CAAC,OAAMI,KAAK,EAAE;IACXC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACxB;AAKA,CAAC;AAcD,OAAO,MAAMiB,aAAa,GAAG,MAAMhC,KAAK,IAAK;EAC3C,IAAI;IACFgB,OAAO,CAACE,GAAG,CAAC,kBAAkB,EAAElB,KAAK,CAAC;IACtC,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,wEAAwE,EAAE;MACrGR,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASD,KAAM;MACnC;IACD,CAAC,CAAC;IACD,OAAQQ,QAAQ,CAACG,IAAI,EAAE;EAC7B,CAAC,CAAC,OAAMI,KAAK,EAAE;IACXC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACxB;AACA,CAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module"}